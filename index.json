{
  "README.html": {
    "href": "README.html",
    "title": "SESION DE LABORATORIO N° 04: PRUEBAS DE INTEGRACIÓN CON MOQ | EcommerceApp API Docs",
    "summary": "SESION DE LABORATORIO N° 04: PRUEBAS DE INTEGRACIÓN CON MOQ NOMBRE: SEBASTIAN NICOLAS FUENTES AVALOS OBJETIVOS Comprender el funcionamiento de las pruebas de integración utilizando la libreria Moq. REQUERIMIENTOS Conocimientos: Conocimientos básicos de Bash (powershell). Conocimientos básicos de Contenedores (Docker). Hardware: Virtualization activada en el BIOS.. CPU SLAT-capable feature. Al menos 4GB de RAM. Software: Windows 10 64bit: Pro, Enterprise o Education (1607 Anniversary Update, Build 14393 o Superior) Docker Desktop Powershell versión 7.x Net 8 o superior Visual Studio Code CONSIDERACIONES INICIALES Clonar el repositorio mediante git para tener los recursos necesarios DESARROLLO Iniciar la aplicación Powershell o Windows Terminal en modo administrador Ejecutar el siguiente comando para crear una nueva solución dotnet new sln -o EcommerceApp Acceder a la solución creada y ejecutar el siguiente comando para crear una nueva libreria de clases y adicionarla a la solución actual. cd EcommerceApp dotnet new webapi -o EcommerceApp.Api dotnet sln add EcommerceApp.Api Ejecutar el siguiente comando para crear un nuevo proyecto de pruebas y adicionarla a la solución actual dotnet new nunit -o EcommerceApp.Tests dotnet sln add EcommerceApp.Tests dotnet add EcommerceApp.Tests reference EcommerceApp.Api dotnet add EcommerceApp.Tests package Moq Iniciar Visual Studio Code (VS Code) abriendo el folder de la solución como proyecto. En el proyecto EcommerceApp.Api, crear las carpetas Models y Services. En VS Code, en el proyecto EcommerceApp.Api, dentro de la carpeta Models crear las siguientes interfaces: IAddressInfo.cs namespace EcommerceApp.Api.Models; public interface IAddressInfo { public string Street { get; set; } public string Address { get; set; } public string City { get; set; } public string PostalCode { get; set; } public string PhoneNumber { get; set; } } ICard.cs namespace EcommerceApp.Api.Models; public interface ICard { public string CardNumber { get; set; } public string Name { get; set; } public DateTime ValidTo { get; set; } } ICartItem.cs namespace EcommerceApp.Api.Models; public interface ICartItem { public string ProductId { get; set; } public int Quantity { get; set; } public double Price{ get; set; } } En VS Code, en el proyecto EcommerceApp.Api, dentro de la carpeta Services crear las siguientes interfaces: ICartService.cs using EcommerceApp.Api.Models; namespace EcommerceApp.Api.Services; public interface ICartService { double Total(); IEnumerable<ICartItem> Items(); } IPaymentService.cs using EcommerceApp.Api.Models; namespace EcommerceApp.Api.Services; public interface IPaymentService { bool Charge(double total, ICard card); } IShipmentService.cs using EcommerceApp.Api.Models; namespace EcommerceApp.Api.Services; public interface IShipmentService { void Ship(IAddressInfo info, IEnumerable<ICartItem> items); } En VS Code, en el proyecto EcommerceApp.Api, dentro de la carpeta Controllers crear el siguiente controlador: CartController.cs using EcommerceApp.Api.Models; using EcommerceApp.Api.Services; using Microsoft.AspNetCore.Mvc; namespace EcommerceApp.Api.Controllers; [ApiController] [Route(\"[controller]\")] public class CartController { private readonly ICartService _cartService; private readonly IPaymentService _paymentService; private readonly IShipmentService _shipmentService; public CartController( ICartService cartService, IPaymentService paymentService, IShipmentService shipmentService ) { _cartService = cartService; _paymentService = paymentService; _shipmentService = shipmentService; } [HttpPost] public string CheckOut(ICard card, IAddressInfo addressInfo) { var result = _paymentService.Charge(_cartService.Total(), card); if (result) { _shipmentService.Ship(addressInfo, _cartService.Items()); return \"charged\"; } else { return \"not charged\"; } } } Luego en el proyecto EcommerceApp.Tests añadir un nuevo archivo CartControllerTests.cs e introducir el siguiente código: using EcommerceApp.Api.Controllers; using EcommerceApp.Api.Models; using EcommerceApp.Api.Services; using Moq; namespace EcommerceApp.Tests; public class ControllerTests { private CartController controller; private Mock<IPaymentService> paymentServiceMock; private Mock<ICartService> cartServiceMock; private Mock<IShipmentService> shipmentServiceMock; private Mock<ICard> cardMock; private Mock<IAddressInfo> addressInfoMock; private List<ICartItem> items; [SetUp] public void Setup() { cartServiceMock = new Mock<ICartService>(); paymentServiceMock = new Mock<IPaymentService>(); shipmentServiceMock = new Mock<IShipmentService>(); // arrange cardMock = new Mock<ICard>(); addressInfoMock = new Mock<IAddressInfo>(); // var cartItemMock = new Mock<ICartItem>(); cartItemMock.Setup(item => item.Price).Returns(10); items = new List<ICartItem>() { cartItemMock.Object }; cartServiceMock.Setup(c => c.Items()).Returns(items.AsEnumerable()); controller = new CartController(cartServiceMock.Object, paymentServiceMock.Object, shipmentServiceMock.Object); } [Test] public void ShouldReturnCharged() { string expected = \"charged\"; paymentServiceMock.Setup(p => p.Charge(It.IsAny<double>(), cardMock.Object)).Returns(true); // act var result = controller.CheckOut(cardMock.Object, addressInfoMock.Object); // assert shipmentServiceMock.Verify(s => s.Ship(addressInfoMock.Object, items.AsEnumerable()), Times.Once()); Assert.That(expected, Is.EqualTo(result)); } [Test] public void ShouldReturnNotCharged() { string expected = \"not charged\"; paymentServiceMock.Setup(p => p.Charge(It.IsAny<double>(), cardMock.Object)).Returns(false); // act var result = controller.CheckOut(cardMock.Object, addressInfoMock.Object); // assert shipmentServiceMock.Verify(s => s.Ship(addressInfoMock.Object, items.AsEnumerable()), Times.Never()); Assert.That(expected, Is.EqualTo(result)); } } Abrir un terminal en VS Code (CTRL + Ñ) o vuelva al terminal anteriormente abierto, y ejecutar los comandos: dotnet test --collect:\"XPlat Code Coverage\" El resultado debe ser similar al siguiente. Passed! - Failed: 0, Passed: 2, Skipped: 0, Total: 3, Duration: 12 ms Finalmente proceder a verificar la cobertura, dentro del proyecto Primes.Tests se dede haber generado una carpeta o directorio TestResults, en el cual posiblemente exista otra subpcarpeta o subdirectorio conteniendo un archivo con nombre coverage.cobertura.xml, si existe ese archivo proceder a ejecutar los siguientes comandos desde la linea de comandos abierta anteriomente, de los contrario revisar el paso 8: dotnet tool install -g dotnet-reportgenerator-globaltool ReportGenerator \"-reports:./*/*/*/coverage.cobertura.xml\" \"-targetdir:Cobertura\" -reporttypes:HTML El comando anterior primero proceda instalar una herramienta llamada ReportGenerator (https://reportgenerator.io/) la cual mediante la segunda parte del comando permitira generar un reporte en formato HTML con la cobertura obtenida de la ejecución de las pruebas. Este reporte debe localizarse dentro de una carpeta llamada Cobertura y puede acceder a el abriendo con un navegador de internet el archivo index.htm. Actividades Encargadas Reescribir los metodos adicionando un servicio de descuento sobre el monto total de la operación y crear un tercer metodo de prueba que combine los dos anteriores utilizando parametros para las pruebas. Utilizar el utilitario ddl2mmd para generar el diagrama de clases (clases.md) del proyecto EcommerceApp.Api. Completar la documentación del Clases, atributos y métodos para luego generar una automatización (publish_docs.yml) que genere la documentación utilizando DocFx y la publique en una Github Page Generar una automatización (publish_cov_report.yml) que: * Compile el proyecto y ejecute las pruebas unitarias, * Genere el reporte de cobertura, * Publique el reporte en Github Page Generar una automatización (release.yml) que: * Genere el nuget con su codigo de matricula como version del componente, * Publique el nuget en Github Packages, * Genere el release correspondiente"
  },
  "api/EcommerceApp.Api.Controllers.CartController.html": {
    "href": "api/EcommerceApp.Api.Controllers.CartController.html",
    "title": "Class CartController | EcommerceApp API Docs",
    "summary": "Class CartController Inheritance object CartController Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EcommerceApp.Api.Controllers Assembly: EcommerceApp.Api.dll Syntax [ApiController] [Route(\"[controller]\")] public class CartController Constructors | Edit this page View Source CartController(ICartService, IPaymentService, IShipmentService) Declaration public CartController(ICartService cartService, IPaymentService paymentService, IShipmentService shipmentService) Parameters Type Name Description ICartService cartService IPaymentService paymentService IShipmentService shipmentService Methods | Edit this page View Source CheckOut(ICard, IAddressInfo) Declaration [HttpPost] public string CheckOut(ICard card, IAddressInfo addressInfo) Parameters Type Name Description ICard card IAddressInfo addressInfo Returns Type Description string"
  },
  "api/EcommerceApp.Api.Controllers.html": {
    "href": "api/EcommerceApp.Api.Controllers.html",
    "title": "Namespace EcommerceApp.Api.Controllers | EcommerceApp API Docs",
    "summary": "Namespace EcommerceApp.Api.Controllers Classes CartController"
  },
  "api/EcommerceApp.Api.Models.IAddressInfo.html": {
    "href": "api/EcommerceApp.Api.Models.IAddressInfo.html",
    "title": "Interface IAddressInfo | EcommerceApp API Docs",
    "summary": "Interface IAddressInfo Namespace: EcommerceApp.Api.Models Assembly: EcommerceApp.Api.dll Syntax public interface IAddressInfo Properties | Edit this page View Source Address Declaration string Address { get; set; } Property Value Type Description string | Edit this page View Source City Declaration string City { get; set; } Property Value Type Description string | Edit this page View Source PhoneNumber Declaration string PhoneNumber { get; set; } Property Value Type Description string | Edit this page View Source PostalCode Declaration string PostalCode { get; set; } Property Value Type Description string | Edit this page View Source Street Declaration string Street { get; set; } Property Value Type Description string"
  },
  "api/EcommerceApp.Api.Models.ICard.html": {
    "href": "api/EcommerceApp.Api.Models.ICard.html",
    "title": "Interface ICard | EcommerceApp API Docs",
    "summary": "Interface ICard Namespace: EcommerceApp.Api.Models Assembly: EcommerceApp.Api.dll Syntax public interface ICard Properties | Edit this page View Source CardNumber Declaration string CardNumber { get; set; } Property Value Type Description string | Edit this page View Source Name Declaration string Name { get; set; } Property Value Type Description string | Edit this page View Source ValidTo Declaration DateTime ValidTo { get; set; } Property Value Type Description DateTime"
  },
  "api/EcommerceApp.Api.Models.ICartItem.html": {
    "href": "api/EcommerceApp.Api.Models.ICartItem.html",
    "title": "Interface ICartItem | EcommerceApp API Docs",
    "summary": "Interface ICartItem Namespace: EcommerceApp.Api.Models Assembly: EcommerceApp.Api.dll Syntax public interface ICartItem Properties | Edit this page View Source Price Declaration double Price { get; set; } Property Value Type Description double | Edit this page View Source ProductId Declaration string ProductId { get; set; } Property Value Type Description string | Edit this page View Source Quantity Declaration int Quantity { get; set; } Property Value Type Description int"
  },
  "api/EcommerceApp.Api.Models.html": {
    "href": "api/EcommerceApp.Api.Models.html",
    "title": "Namespace EcommerceApp.Api.Models | EcommerceApp API Docs",
    "summary": "Namespace EcommerceApp.Api.Models Interfaces IAddressInfo ICard ICartItem"
  },
  "api/EcommerceApp.Api.Services.FixedDiscountService.html": {
    "href": "api/EcommerceApp.Api.Services.FixedDiscountService.html",
    "title": "Class FixedDiscountService | EcommerceApp API Docs",
    "summary": "Class FixedDiscountService Implementación de descuento fijo basado en una tasa. Inheritance object FixedDiscountService Implements IDiscountService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EcommerceApp.Api.Services Assembly: EcommerceApp.Api.dll Syntax public class FixedDiscountService : IDiscountService Constructors | Edit this page View Source FixedDiscountService(decimal) Inicializa una nueva instancia con una tasa de descuento específica. Declaration public FixedDiscountService(decimal discountRate) Parameters Type Name Description decimal discountRate Tasa de descuento (ej. 0.1 para 10%). Methods | Edit this page View Source ApplyDiscount(decimal) Aplica un descuento al monto total. Declaration public decimal ApplyDiscount(decimal totalAmount) Parameters Type Name Description decimal totalAmount Monto antes del descuento. Returns Type Description decimal Monto después del descuento. Implements IDiscountService"
  },
  "api/EcommerceApp.Api.Services.ICartService.html": {
    "href": "api/EcommerceApp.Api.Services.ICartService.html",
    "title": "Interface ICartService | EcommerceApp API Docs",
    "summary": "Interface ICartService Define el servicio de operaciones sobre el carrito de compras. Namespace: EcommerceApp.Api.Services Assembly: EcommerceApp.Api.dll Syntax public interface ICartService Methods | Edit this page View Source Items() Obtiene los elementos contenidos en el carrito. Declaration IEnumerable<ICartItem> Items() Returns Type Description IEnumerable<ICartItem> Lista de ítems en el carrito. | Edit this page View Source Total() Calcula el total del carrito. Declaration double Total() Returns Type Description double Total acumulado en el carrito."
  },
  "api/EcommerceApp.Api.Services.IDiscountService.html": {
    "href": "api/EcommerceApp.Api.Services.IDiscountService.html",
    "title": "Interface IDiscountService | EcommerceApp API Docs",
    "summary": "Interface IDiscountService Define la interfaz para aplicar descuentos sobre un monto total. Namespace: EcommerceApp.Api.Services Assembly: EcommerceApp.Api.dll Syntax public interface IDiscountService Methods | Edit this page View Source ApplyDiscount(decimal) Aplica un descuento al monto total. Declaration decimal ApplyDiscount(decimal totalAmount) Parameters Type Name Description decimal totalAmount Monto antes del descuento. Returns Type Description decimal Monto después del descuento."
  },
  "api/EcommerceApp.Api.Services.IPaymentService.html": {
    "href": "api/EcommerceApp.Api.Services.IPaymentService.html",
    "title": "Interface IPaymentService | EcommerceApp API Docs",
    "summary": "Interface IPaymentService Define el servicio de procesamiento de pagos. Namespace: EcommerceApp.Api.Services Assembly: EcommerceApp.Api.dll Syntax public interface IPaymentService Methods | Edit this page View Source Charge(double, ICard) Realiza el cobro de un monto total a una tarjeta. Declaration bool Charge(double total, ICard card) Parameters Type Name Description double total Monto total a cobrar. ICard card Tarjeta del cliente. Returns Type Description bool True si el cobro fue exitoso, false si falló."
  },
  "api/EcommerceApp.Api.Services.IShipmentService.html": {
    "href": "api/EcommerceApp.Api.Services.IShipmentService.html",
    "title": "Interface IShipmentService | EcommerceApp API Docs",
    "summary": "Interface IShipmentService Define el servicio de envío de productos. Namespace: EcommerceApp.Api.Services Assembly: EcommerceApp.Api.dll Syntax public interface IShipmentService Methods | Edit this page View Source Ship(IAddressInfo, IEnumerable<ICartItem>) Realiza el envío de los productos a la dirección especificada. Declaration void Ship(IAddressInfo info, IEnumerable<ICartItem> items) Parameters Type Name Description IAddressInfo info Información de dirección del destinatario. IEnumerable<ICartItem> items Lista de productos a enviar."
  },
  "api/EcommerceApp.Api.Services.PurchaseService.html": {
    "href": "api/EcommerceApp.Api.Services.PurchaseService.html",
    "title": "Class PurchaseService | EcommerceApp API Docs",
    "summary": "Class PurchaseService Servicio para calcular totales de compra con impuestos y descuentos. Inheritance object PurchaseService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EcommerceApp.Api.Services Assembly: EcommerceApp.Api.dll Syntax public class PurchaseService Constructors | Edit this page View Source PurchaseService(IDiscountService) Inicializa una nueva instancia de PurchaseService. Declaration public PurchaseService(IDiscountService discountService) Parameters Type Name Description IDiscountService discountService Servicio de descuento a aplicar. Methods | Edit this page View Source CalculateTotalWithDiscount(decimal, int) Calcula el total aplicando el descuento sobre el precio unitario y cantidad. Declaration public decimal CalculateTotalWithDiscount(decimal unitPrice, int quantity) Parameters Type Name Description decimal unitPrice Precio unitario del producto. int quantity Cantidad de productos. Returns Type Description decimal Total con descuento aplicado. | Edit this page View Source CalculateTotalWithTaxAndDiscount(decimal, int, decimal) Calcula el total con impuesto y descuento aplicados. Declaration public decimal CalculateTotalWithTaxAndDiscount(decimal unitPrice, int quantity, decimal taxRate) Parameters Type Name Description decimal unitPrice Precio unitario del producto. int quantity Cantidad de productos. decimal taxRate Tasa de impuesto (por ejemplo, 0.18 para 18%). Returns Type Description decimal Total con impuestos y descuentos."
  },
  "api/EcommerceApp.Api.Services.html": {
    "href": "api/EcommerceApp.Api.Services.html",
    "title": "Namespace EcommerceApp.Api.Services | EcommerceApp API Docs",
    "summary": "Namespace EcommerceApp.Api.Services Classes FixedDiscountService Implementación de descuento fijo basado en una tasa. PurchaseService Servicio para calcular totales de compra con impuestos y descuentos. Interfaces ICartService Define el servicio de operaciones sobre el carrito de compras. IDiscountService Define la interfaz para aplicar descuentos sobre un monto total. IPaymentService Define el servicio de procesamiento de pagos. IShipmentService Define el servicio de envío de productos."
  },
  "api/EcommerceApp.Tests.ControllerTests.html": {
    "href": "api/EcommerceApp.Tests.ControllerTests.html",
    "title": "Class ControllerTests | EcommerceApp API Docs",
    "summary": "Class ControllerTests Inheritance object ControllerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EcommerceApp.Tests Assembly: EcommerceApp.Tests.dll Syntax public class ControllerTests Methods | Edit this page View Source Setup() Declaration [SetUp] public void Setup() | Edit this page View Source ShouldReturnCharged() Declaration [Test] public void ShouldReturnCharged() | Edit this page View Source ShouldReturnNotCharged() Declaration [Test] public void ShouldReturnNotCharged()"
  },
  "api/EcommerceApp.Tests.PurchaseServiceTests.html": {
    "href": "api/EcommerceApp.Tests.PurchaseServiceTests.html",
    "title": "Class PurchaseServiceTests | EcommerceApp API Docs",
    "summary": "Class PurchaseServiceTests Inheritance object PurchaseServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EcommerceApp.Tests Assembly: EcommerceApp.Tests.dll Syntax public class PurchaseServiceTests Methods | Edit this page View Source CalculateTotalWithTaxAndDiscount_Test(decimal, int, double, double) Declaration [TestCase(new object?[] { 100, 2, 0.1, 0.15 }, ExpectedResult = 207)] [TestCase(new object?[] { 50, 4, 0.2, 0.1 }, ExpectedResult = 176)] public decimal CalculateTotalWithTaxAndDiscount_Test(decimal unitPrice, int quantity, double discountRate, double taxRate) Parameters Type Name Description decimal unitPrice int quantity double discountRate double taxRate Returns Type Description decimal"
  },
  "api/EcommerceApp.Tests.Tests.html": {
    "href": "api/EcommerceApp.Tests.Tests.html",
    "title": "Class Tests | EcommerceApp API Docs",
    "summary": "Class Tests Inheritance object Tests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: EcommerceApp.Tests Assembly: EcommerceApp.Tests.dll Syntax public class Tests Methods | Edit this page View Source Setup() Declaration [SetUp] public void Setup() | Edit this page View Source Test1() Declaration [Test] public void Test1()"
  },
  "api/EcommerceApp.Tests.html": {
    "href": "api/EcommerceApp.Tests.html",
    "title": "Namespace EcommerceApp.Tests | EcommerceApp API Docs",
    "summary": "Namespace EcommerceApp.Tests Classes ControllerTests PurchaseServiceTests Tests"
  },
  "disenio.html": {
    "href": "disenio.html",
    "title": "Diagrama de Clases - EcommerceApp.Api | EcommerceApp API Docs",
    "summary": "Diagrama de Clases - EcommerceApp.Api classDiagram %% Interfaces class ICartService { <<interface>> +Total() double +Items() IEnumerable~ICartItem~ } class ICartItem { <<interface>> +ProductId string +Quantity int +Price double } class IPaymentService { <<interface>> +Pay(ICard card, double amount) void } class IShipmentService { <<interface>> +Ship(IAddressInfo addressInfo, IEnumerable~ICartItem~ items) void } class ICard { <<interface>> } class IAddressInfo { <<interface>> } %% Controllers class CartController { <<controller>> -_cartService ICartService -_paymentService IPaymentService -_shipmentService IShipmentService +CartController(ICartService cartService, IPaymentService paymentService, IShipmentService shipmentService) +CheckOut(ICard card, IAddressInfo addressInfo) void } %% Program Class class Program { <<static>> +Main(string[] args) void } %% WeatherForecast (if exists based on coverage) class WeatherForecast { +Date DateOnly +TemperatureC int +Summary string +TemperatureF int } %% Relationships CartController --> ICartService : uses CartController --> IPaymentService : uses CartController --> IShipmentService : uses CartController --> ICard : uses CartController --> IAddressInfo : uses ICartService --> ICartItem : returns IShipmentService --> ICartItem : uses IPaymentService --> ICard : uses IShipmentService --> IAddressInfo : uses %% Namespace annotations note for ICartService \"EcommerceApp.Api.Services\" note for ICartItem \"EcommerceApp.Api.Models\" note for CartController \"EcommerceApp.Api.Controllers\""
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | EcommerceApp API Docs",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | EcommerceApp API Docs",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | EcommerceApp API Docs",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}